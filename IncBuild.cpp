// IncBuild.cpp : Defines the class behaviors for the application.
//

#include "stdafx.h"
#include "IncBuild.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

static const CString BUILD_TAG = _T(_T("#define APP_VERSION_BUILD"));

/////////////////////////////////////////////////////////////////////////////
// CIncBuildApp

BEGIN_MESSAGE_MAP(CIncBuildApp, CWinApp)
	//{{AFX_MSG_MAP(CIncBuildApp)
		// NOTE - the ClassWizard will add and remove mapping macros here.
		//    DO NOT EDIT what you see in these blocks of generated code!
	//}}AFX_MSG
	ON_COMMAND(ID_HELP, CWinApp::OnHelp)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CIncBuildApp construction

CIncBuildApp::CIncBuildApp()
{
	// TODO: add construction code here,
	// Place all significant initialization in InitInstance
	TCHAR sz[MAX_PATH + 1] = _T("");
	::GetModuleFileName(NULL, sz, MAX_PATH);
	LPTSTR p = _tcsrchr(sz, _T('\\'));
	if (p)
		*p = _T('\0');
	m_sAppDir = sz;
}

/////////////////////////////////////////////////////////////////////////////
// The one and only CIncBuildApp object

CIncBuildApp theApp;

/////////////////////////////////////////////////////////////////////////////
// CIncBuildApp initialization

BOOL CIncBuildApp::InitInstance()
{
	// Copies application directory
	if (::DeleteFile(m_sAppDir + _T("\\IncBuild.tmp")))
		return FALSE;
	
	CStdioFile file;
	file.Open(m_sAppDir + _T("\\IncBuild.tmp"), CFile::modeWrite | CFile::modeCreate);
	file.WriteString(_T("0"));
	file.Close();

	CString sContents;
	if (!file.Open(m_sAppDir + _T("\\Version.h"), CFile::modeRead))
	{
		NewProject();
		return FALSE;
	}

	BOOL bReplaced = FALSE;
	CString sLine;
	while (file.ReadString(sLine))
	{
		if (!bReplaced)
		{
			int nPos = sLine.Find(BUILD_TAG);
			if (nPos == 0)
			{
				CString sNum = sLine.Mid(nPos + BUILD_TAG.GetLength());
				sNum.TrimLeft();
				sNum.TrimLeft(_T('('));
				sNum.TrimLeft();
				int nBuild = _ttoi(sNum);
				sLine.Format(_T("%s\t(%d) // Build number, will be auto incremented by IncBuild"), (LPCTSTR)BUILD_TAG, nBuild + 1);	
				bReplaced = TRUE;
			}
		}
		
		sContents += sLine + _T('\n');
	}
	file.Close();
	
	file.Open(m_sAppDir + _T("\\Version.h"), CFile::modeWrite | CFile::modeCreate);
	file.WriteString(sContents);
	file.Close();

	return FALSE;
}

void CIncBuildApp::NewProject()
{
	CStdioFile file;
	file.Open(m_sAppDir + _T("\\Version.h"), CFile::modeWrite | CFile::modeCreate);	

	file.WriteString(_T("////////////////////////////////////////////////////////\n"));
	file.WriteString(_T("// Version.h\n\n"));
	file.WriteString(_T("// Version file auto generated by IncBuild.\n"));
	file.WriteString(_T("// Abin (abinn32@163.com)\n"));
	file.WriteString(_T("// "));
	file.WriteString(COleDateTime::GetCurrentTime().Format(VAR_DATEVALUEONLY) + _T('\n'));
	file.WriteString(_T("////////////////////////////////////////////////////////\n\n"));
	file.WriteString(_T("#ifndef __VERSION_H__\n"));
	file.WriteString(_T("#define __VERSION_H__\n\n"));
	file.WriteString(_T("#define APP_VERSION_MAJOR\t(1) // Major version, can be modified.\n"));
	file.WriteString(_T("#define APP_VERSION_MINOR\t(1) // Minor version, can be modified.\n"));
	file.WriteString(BUILD_TAG + _T("\t(1) // Build number, will be auto incremented by IncBuild\n\n"));		

	file.WriteString(_T("int AfxCompareVersion(int nMajor, int nMinor, int nBuild); // The competitor is 1: Newer, -1: Older, 0: Same\n"));
	file.WriteString(_T("CString AfxGetVersion(BOOL bShowBuild = TRUE); // In format of \"x.xx.xxxx\" or \"x.xx\"\n\n"));	
	file.WriteString(_T("#endif // __VERSION_H__\n"));
	file.Close();

	file.Open(m_sAppDir + _T("\\Version.cpp"), CFile::modeWrite | CFile::modeCreate);	
	file.WriteString(_T("////////////////////////////////////////////////////////\n"));
	file.WriteString(_T("// Version.cpp\n\n"));
	file.WriteString(_T("// Version file auto generated by IncBuild.\n"));
	file.WriteString(_T("// Abin (abinn32@163.com)\n"));
	file.WriteString(_T("// "));
	file.WriteString(COleDateTime::GetCurrentTime().Format(VAR_DATEVALUEONLY) + _T('\n'));
	file.WriteString(_T("////////////////////////////////////////////////////////\n\n"));
	
	file.WriteString(_T("#include \"stdafx.h\"\n"));
	file.WriteString(_T("#include \"Version.h\"\n\n"));

	file.WriteString(_T("int AfxCompareVersion(int nMajor, int nMinor, int nBuild)\n"));
	file.WriteString(_T("{\n"));	
	file.WriteString(_T("\tif (APP_VERSION_MAJOR > nMajor)\n"));
	file.WriteString(_T("\t\treturn -1;\n\n"));
	file.WriteString(_T("\tif (APP_VERSION_MAJOR < nMajor)\n"));
	file.WriteString(_T("\t\treturn 1;\n\n"));
	file.WriteString(_T("\tif (APP_VERSION_MINOR > nMinor)\n"));
	file.WriteString(_T("\t\treturn -1;\n\n"));
	file.WriteString(_T("\tif (APP_VERSION_MINOR < nMinor)\n"));
	file.WriteString(_T("\t\treturn 1;\n\n"));
	file.WriteString(_T("\tif (APP_VERSION_BUILD > nBuild)\n"));
	file.WriteString(_T("\t\treturn -1;\n\n"));
	file.WriteString(_T("\tif (APP_VERSION_BUILD < nBuild)\n"));
	file.WriteString(_T("\t\treturn 1;\n\n"));
	file.WriteString(_T("\treturn 0;\n"));	
	file.WriteString(_T("}\n\n"));

	file.WriteString(_T("CString AfxGetVersion(BOOL bShowBuild)\n"));
	file.WriteString(_T("{\n"));
	file.WriteString(_T("\tCString sVersion;\n\n"));
	file.WriteString(_T("\tif (bShowBuild)\n"));
	file.WriteString(_T("\t\tsVersion.Format(_T(\"%d.%02d.%04d\"), APP_VERSION_MAJOR, APP_VERSION_MINOR, APP_VERSION_BUILD);\n"));
	file.WriteString(_T("\telse\n"));
	file.WriteString(_T("\t\tsVersion.Format(_T(\"%d.%02d\"), APP_VERSION_MAJOR, APP_VERSION_MINOR);\n\n"));
	file.WriteString(_T("\treturn sVersion;\n"));
	file.WriteString(_T("}\n"));

	file.Close();	
}
